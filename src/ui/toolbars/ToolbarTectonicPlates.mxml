<?xml version="1.0"?>
<t:Toolbar xmlns:fx="http://ns.adobe.com/mxml/2009"
           xmlns:s="library://ns.adobe.com/flex/spark"
           xmlns:c="ui.components.*"
           creationComplete="onCreationComplete(event)"
           xmlns:t="ui.toolbars.*">

    <fx:Script><![CDATA[
        import events.StateEvent;

        import game.Artist;

        import game.Map;
        import game.controllers.Tectonics;
        import game.controllers.Tectonics;
        import game.graph.Cell;

        import global.Color;
        import global.Icons;

        import global.Local;

        import managers.State;

        import managers.State;

        import mx.collections.ArrayCollection;

        import mx.events.FlexEvent;

        import spark.collections.Sort;
        import spark.collections.SortField;

        public var choosingPlateOriginId:String;

        override protected function start():void
        {
            trace("Start toolbartectonicplates");

            updatePlatesFromState();

            State.dispatcher.addEventListener(State.STATE_CHANGED, onStateChanged);
            listPlates.addEventListener(Tectonics.CHOOSE_PLATE, function (event:Event):void
            {
                groupChoosing.visible = groupChoosing.enabled = true;
                choosingPlateOriginId = event.target.data.id
            });
        }

        private function onStateChanged(event:StateEvent):void
        {
            updatePlatesFromState();
        }

        private function onCancelChoosePlate(event:MouseEvent):void
        {
            choosingPlateOriginId = null;
            groupChoosing.visible = groupChoosing.enabled = false;
        }

        private function updatePlatesFromState():void
        {
            var u:Object = State.read("plates");
            if (!u)
                u = {};

            var plates:ArrayCollection = new ArrayCollection();
            for each (var plate:Object in u)
                plates.addItem(plate);

            var sortByValue:Sort = new Sort();
            sortByValue.fields = [new SortField("id", true)];
            plates.sort = sortByValue;
            plates.refresh();

            listPlates.dataProvider = plates;

            Artist.drawTectonicPlates();
        }

        public function choosePlate():void
        {
            groupChoosing.visible = groupChoosing.enabled = false;
            if (!groupChoosing.visible)
                choosingPlateOriginId = null;
        }

        private function onAddPlate(event:MouseEvent):void
        {
            Tectonics.addPlate();
        }
        ]]>
    </fx:Script>

    <s:VGroup width="100%"
              height="100%"
              verticalAlign="bottom">

        <s:Group width="100%"
                 height="100%">

            <s:VGroup width="100%"
                      height="100%"
                      gap="15">

                <s:Label text="{Local.text('task_make_tectonic_plates_text')}"
                         width="100%"/>

                <s:Button id="buttonAddPlate"
                          label="{Local.text('add_plate')}"
                          click="onAddPlate(event)"/>

                <s:VGroup width="100%">
                    <s:List id="listPlates"
                            useVirtualLayout="false"
                            width="100%"
                            contentBackgroundAlpha="0"
                            borderVisible="false"
                            horizontalScrollPolicy="off"
                            preventSelection="true"
                            itemRenderer="ui.itemRenderers.ItemRendererTectonicPlate">
                        <s:layout>
                            <s:VerticalLayout gap="5"/>
                        </s:layout>
                    </s:List>
                </s:VGroup>

            </s:VGroup>

            <s:Group id="groupChoosing"
                     visible="false"
                     enabled="false"
                     width="100%"
                     height="100%">
                <s:Rect width="100%"
                        height="100%">
                    <s:fill>
                        <s:SolidColor color="{Color.fillHigh}"/>
                    </s:fill>
                </s:Rect>
                <s:VGroup width="100%"
                          height="100%"
                          horizontalAlign="center"
                          verticalAlign="middle"
                          gap="10">
                    <c:ColorBitmapImage source="{Icons.Target}"
                                        color="{Color.textMedium}"/>
                    <s:Label width="100%"
                             textAlign="center"
                             text="{Local.text('choosing_plate_origin')}"/>
                    <s:Button label="{Local.text('cancel')}"
                              click="onCancelChoosePlate(event)"/>
                </s:VGroup>
            </s:Group>

        </s:Group>

    </s:VGroup>

</t:Toolbar>
