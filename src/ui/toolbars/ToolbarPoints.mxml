<?xml version="1.0"?>
<t:Toolbar xmlns:fx="http://ns.adobe.com/mxml/2009"
           xmlns:s="library://ns.adobe.com/flex/spark"
           xmlns:c="ui.components.*"
           xmlns:t="ui.toolbars.*"
           creationComplete="onCreationComplete(event)">

    <fx:Script><![CDATA[
        import global.Color;
        import global.Icons;
        import global.Local;
        import global.Util;

        import makers.PointsMaker;

        import managers.State;

        import mx.events.FlexEvent;

        import spark.events.TextOperationEvent;

        private var type:String;
        private var seed:String;
        private var spacing:Number;
        private var precision:Number;
        private var amount:Number;


        override public function onCreationComplete(event:FlexEvent):void
        {
            super.onCreationComplete(event);

            type = State.read("points.type");
            if (!type)
                type = PointsMaker.TYPE_POISSON_DISC;

            seed = State.read("points.seed");
            if (!seed)
                applyRandomSeed();
            inputSeed.text = seed;
            updateSeedHash();

            var radioButtonsByPointsType:Object = {};
            radioButtonsByPointsType[PointsMaker.TYPE_POISSON_DISC] = radioButtonPoissonDisc;
            radioButtonsByPointsType[PointsMaker.TYPE_RANDOM] = radioButtonRandom;
            radioButtonsByPointsType[PointsMaker.TYPE_SQUARE] = radioButtonSquare;
            radioButtonsByPointsType[PointsMaker.TYPE_HEX] = radioButtonHex;

            radioButtonsByPointsType[type].selected = true;
            validate();
        }

        private function applyRandomSeed():void
        {
            // Choose a random seed and apply it
            seed = Util.randomSeed();
            State.write("points.seed", seed);
        }

        private function onChangePointsType(event:MouseEvent):void
        {
            validate();
        }

        private function validate():void
        {
            var pointsTypeByRadioButton:Object = {
                radioButtonPoissonDisc: PointsMaker.TYPE_POISSON_DISC,
                radioButtonRandom: PointsMaker.TYPE_RANDOM,
                radioButtonSquare: PointsMaker.TYPE_SQUARE,
                radioButtonHex: PointsMaker.TYPE_HEX
            };

            var selection:RadioButton = radioButtonPoissonDisc.group.selection;
            if (selection != null)
                type = pointsTypeByRadioButton[selection.id];

            State.write("points.type", type);

            // Show/hide relevant parts
            switch (type)
            {
                case PointsMaker.TYPE_POISSON_DISC:
                    groupSeed.visible = groupSeed.includeInLayout = true;
                    sliderSpacing.visible = sliderSpacing.includeInLayout = true;
                    sliderPrecision.visible = sliderPrecision.includeInLayout = true;
                    sliderAmount.visible = sliderAmount.includeInLayout = false;
                    break;
                case PointsMaker.TYPE_RANDOM:
                    groupSeed.visible = groupSeed.includeInLayout = true;
                    sliderSpacing.visible = sliderSpacing.includeInLayout = false;
                    sliderPrecision.visible = sliderPrecision.includeInLayout = false;
                    sliderAmount.visible = sliderAmount.includeInLayout = true;
                    break;
                case PointsMaker.TYPE_SQUARE:
                case PointsMaker.TYPE_HEX:
                    groupSeed.visible = groupSeed.includeInLayout = false;
                    sliderSpacing.visible = sliderSpacing.includeInLayout = true;
                    sliderPrecision.visible = sliderPrecision.includeInLayout = false;
                    sliderAmount.visible = sliderAmount.includeInLayout = false;
                    break;
            }

            // Get the values from the State
            spacing = State.read("points.spacing");
            if (!spacing)
                spacing = 10;
            precision = State.read("points.precision");
            if (!precision)
                precision = 7;
            amount = State.read("points.amount");
            if (!amount)
                amount = 5000;

            // Spacing
            sliderSpacing.label.text = Local.text('spacing');
            sliderSpacing.slider.minimum = 5;
            sliderSpacing.slider.maximum = 20;
            sliderSpacing.slider.stepSize = 1;
            sliderSpacing.slider.snapInterval = 1;
            sliderSpacing.value = spacing;
            sliderSpacing.addEventListener(Event.CHANGE, onChange, false, 0, true);

            // Precision
            sliderPrecision.label.text = Local.text('precision');
            sliderPrecision.slider.minimum = 1;
            sliderPrecision.slider.maximum = 20;
            sliderPrecision.slider.stepSize = 1;
            sliderPrecision.slider.snapInterval = 1;
            sliderPrecision.value = precision;
            sliderPrecision.addEventListener(Event.CHANGE, onChange, false, 0, true);

            // Amount
            sliderAmount.label.text = Local.text('amount');
            sliderAmount.slider.minimum = 2000;
            sliderAmount.slider.maximum = 20000;
            sliderAmount.slider.stepSize = 100;
            sliderAmount.slider.snapInterval = 100;
            sliderAmount.value = amount;
            sliderAmount.addEventListener(Event.CHANGE, onChange, false, 0, true);

            onChange(null);
        }

        private function onSeedChange(event:TextOperationEvent):void
        {
            // Seed was changed
            seed = inputSeed.text;
            State.write("points.seed", seed);

            updateSeedHash();
        }

        private function onRandomizeSeed(event:MouseEvent):void
        {
            // Pick random seed
            applyRandomSeed();
            inputSeed.text = seed;

            updateSeedHash();
        }

        private function updateSeedHash():void
        {
            labelSeedHash.text = Local.text('seed_hash', [Util.stringToSeed(seed)]);
        }

        private function onChange(event:Event):void
        {
            spacing = sliderSpacing.value;
            State.write("points.spacing", spacing);

            precision = sliderPrecision.value;
            State.write("points.precision", precision);

            amount = sliderAmount.value;
            State.write("points.amount", amount);
        }
        ]]>
    </fx:Script>

    <s:VGroup width="100%"
              height="100%"
              verticalAlign="bottom">

        <s:VGroup width="100%"
                  height="100%"
                  gap="15">

            <s:Label text="{Local.text('task_make_voronoi_points_text')}"
                     width="100%"/>

            <s:VGroup width="100%">
                <s:RadioButton groupName="pointsType"
                               id="radioButtonPoissonDisc"
                               label="{Local.text('points_type_poisson_disc')}"
                               click="onChangePointsType(event)"/>

                <s:RadioButton groupName="pointsType"
                               id="radioButtonSquare"
                               label="{Local.text('points_type_square')}"
                               click="onChangePointsType(event)"/>

                <s:RadioButton groupName="pointsType"
                               id="radioButtonHex"
                               label="{Local.text('points_type_hex')}"
                               click="onChangePointsType(event)"/>

                <s:RadioButton groupName="pointsType"
                               id="radioButtonRandom"
                               label="{Local.text('points_type_random')}"
                               click="onChangePointsType(event)"/>
            </s:VGroup>

            <s:Panel skinClass="ui.skins.PanelSkinInset"
                     width="100%">

                <s:VGroup width="100%"
                          padding="5"
                          gap="15">

                    <s:VGroup id="groupSeed"
                              width="100%"
                              gap="10">
                        <s:Label text="{Local.text('seed')}"
                                 width="100%"/>
                        <s:VGroup width="100%">
                            <s:HGroup width="100%">
                                <c:IconTextInput id="inputSeed"
                                                 width="100%"
                                                 icon="{Icons.Flower}"
                                                 change="onSeedChange(event)"/>
                                <s:Button toolTip="{Local.text('randomize')}"
                                          icon="{Icons.Dice}"
                                          click="onRandomizeSeed(event)"/>
                            </s:HGroup>
                            <s:Label id="labelSeedHash"
                                     fontSize="10"
                                     color="{Color.textLow}"/>
                        </s:VGroup>

                    </s:VGroup>

                    <c:SliderWithInput id="sliderAmount"
                                       width="100%"/>

                    <c:SliderWithInput id="sliderSpacing"
                                       width="100%"/>

                    <c:SliderWithInput id="sliderPrecision"
                                       width="100%"/>

                </s:VGroup>
            </s:Panel>
        </s:VGroup>
    </s:VGroup>

</t:Toolbar>
