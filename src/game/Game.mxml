<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:c="ui.components.*"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:p="ui.panes.*"
         creationComplete="onCreationComplete(event)">

    <fx:Script>
        <![CDATA[
        import com.greensock.TweenLite;

        import game.task.Task;
        import game.task.TaskId;

        import global.Color;
        import global.Icons;
        import global.Local;
        import global.Util;

        import managers.PopupManager;
        import managers.State;

        import mx.events.FlexEvent;

        import ui.popups.PopupBusy;

        import ui.popups.PopupConfirm;
        import ui.popups.PopupTasks;
        import ui.toolbars.Toolbar;

        private var map:Map;
        private var toolbar:Toolbar;

        private function onCreationComplete(event:FlexEvent):void
        {
            if (!State.loaded)
                State.loadLocal();

            map = new Map(canvas);
            paneLayers.listLayers.dataProvider = map.layers;

            addEventListeners();

            validate();
        }

        private function addEventListeners():void
        {
            State.dispatcher.addEventListener(State.STATE_CHANGED, function (event:Event):void
            {
                validate();
            });

            viewStackPanes.addEventListener(Event.CLOSE, onPaneClose);
        }

        private function onPaneClose(event:Event):void
        {
            viewStackPanes.visible = viewStackPanes.includeInLayout = false;
        }

        private function onToggleLayers(event:MouseEvent):void
        {
            // If it's already open, close it
            if (viewStackPanes.selectedChild == viewLayers && viewStackPanes.visible)
            {
                onPaneClose(null);
                return;
            }

            // Otherwise, show the layers view
            viewStackPanes.visible = viewStackPanes.includeInLayout = true;
            viewStackPanes.selectedChild = viewLayers;
        }

        private function validate():void
        {
            validateTask();
            paneLayers.validate();
            validateButtonNextTask();
            callLater(validateButtonApply);
        }

        private function validateButtonNextTask():void
        {
            var nextTaskIndex:int = Task.byId(State.read("task")).index + 1;
            if (nextTaskIndex >= Task.tasks.length)
                buttonNextTask.enabled = buttonNextTask.visible = buttonNextTask.includeInLayout = false;
        }

        private function validateTask():void
        {
            // Did the task change?
            if (State.read("task") == undefined)
                State.write("task", TaskId.READ_INTRODUCTION);

            var taskId:String = State.read("task");
            var task:Task = Task.byId(State.read("task"));

            if (toolbar)
            {
                // Don't reload the toolbar if it's the same
                var s:String = toolbar.className;
                var t:String = getQualifiedClassName(task.toolbar);
                t = t.substr(t.indexOf("::") + "::".length);
                if (s == t)
                    return;
            }

            labelTaskNumber.text = (task.index + 1) + "/" + Task.tasks.length;
            labelTaskName.text = Local.text(Util.camelCaseToUnderScore(task.id));

            if (!toolbar || toolbar.taskId != taskId)
            {
                // Dispose existing toolbar
                if (toolbar)
                {
                    toolbar.dispose();
                    groupToolbar.removeElement(toolbar);
                }

                toolbar = new task.toolbar;
                toolbar.percentWidth = 100;
                toolbar.percentHeight = 100;
                groupToolbar.addElement(toolbar);
                scrollerToolbar.visible = false;
                setTimeout(function ():void
                {
                    scrollerToolbar.visible = true;
                    TweenLite.fromTo(scrollerToolbar, .5, {alpha: 0}, {alpha: 1});
                }, 500);
            }

            map.validateAllowedLayers();
        }

        private function onAllTasks(event:MouseEvent):void
        {
            var p:PopupTasks = new PopupTasks();
            PopupManager.open(p);
        }

        private function onApply(event:MouseEvent):void
        {
            var p:PopupBusy = new PopupBusy();
            p.calculation = Map.instance.calculate;
            p.callbackComplete = validateButtonApply;
            PopupManager.open(p);
        }

        private function validateButtonApply():void
        {
            var i:int = 0;
            for (var category:String in Map.instance.invalid)
                i++;
            buttonApply.label = Local.text("apply") + (i > 0 ? " *" : "");
        }

        private function onNextTask(event:MouseEvent):void
        {
            var p:PopupConfirm = new PopupConfirm();
            p.header = Local.text("popup_complete_task_header"); // Complete this task
            p.description = Local.text("popup_complete_task_description"); // Completing this task will lock in your choices permanently and progress to the next task
            p.textConfirm = Local.text("yes_im_sure"); // Yes, I'm sure
            p.textCancel = Local.text("cancel"); // Cancel
            p.callbackConfirm = onNextTaskConfirm;

            PopupManager.open(p);
        }

        public function onNextTaskConfirm():void
        {
            // Go to the next task
            var newTaskIndex:int = Task.byId(State.read("task")).index + 1;
            var newTask:Task = Task.byIndex(newTaskIndex);
            State.write("task", newTask.id);
            validateButtonNextTask();
        }

        private function onZoomIn(event:MouseEvent):void
        {
            canvas.zoomIn();
        }

        private function onZoomOut(event:MouseEvent):void
        {
            canvas.zoomOut();
        }
        ]]>
    </fx:Script>

    <s:Group width="100%"
             height="100%">

        <s:HGroup width="100%"
                  height="100%"
                  padding="15"
                  gap="15">

            <mx:ViewStack id="viewStackPanes"
                          width="320"
                          height="100%"
                          visible="false"
                          includeInLayout="false">
                <s:NavigatorContent id="viewLayers"
                                    width="100%"
                                    height="100%">
                    <p:PaneLayers id="paneLayers"
                                  width="100%"
                                  height="100%"/>
                </s:NavigatorContent>
            </mx:ViewStack>

            <s:Group width="100%"
                     height="100%">

                <!--Canvas-->
                <c:Canvas id="canvas"
                          width="100%"
                          height="100%"/>

                <!--Map Controls-->
                <s:HGroup width="100%">
                    <s:Group>
                        <s:Rect width="100%"
                                height="100%"
                                bottomRightRadiusX="10"
                                bottomRightRadiusY="10">
                            <s:fill>
                                <s:SolidColor color="{Color.fillLow}"/>
                            </s:fill>
                        </s:Rect>
                        <s:HGroup padding="5"
                                  paddingLeft="10"
                                  paddingRight="10">
                            <s:Button skinClass="ui.skins.ButtonSkinIcon"
                                      icon="{Icons.Layers}"
                                      toolTip="{Local.text('map_layers')}"
                                      click="onToggleLayers(event)"/>
                            <s:Button skinClass="ui.skins.ButtonSkinIcon"
                                      icon="{Icons.Plus}"
                                      toolTip="{Local.text('zoom_in')}"
                                      click="onZoomIn(event)"/>
                            <s:Button skinClass="ui.skins.ButtonSkinIcon"
                                      icon="{Icons.Minus}"
                                      toolTip="{Local.text('zoom_out')}"
                                      click="onZoomOut(event)"/>
                        </s:HGroup>
                    </s:Group>
                </s:HGroup>


            </s:Group>

            <!--Task Actions-->
            <s:Panel skinClass="ui.skins.PanelSkinOutline"
                     width="320"
                     height="100%">

                <s:VGroup width="100%"
                          height="100%"
                          padding="10"
                          gap="15">

                    <!--Task Actions-->
                    <s:HGroup width="100%"
                              verticalAlign="middle">

                        <s:Label id="labelTaskNumber"
                                 toolTip="{Local.text('task_progress')}"/>

                        <s:Label id="labelTaskName"
                                 showTruncationTip="true"
                                 width="100%"/>

                        <s:Button label="{Local.text('all_tasks')}"
                                  icon="{Icons.Tasks}"
                                  click="onAllTasks(event)"/>
                    </s:HGroup>

                    <s:Scroller id="scrollerToolbar"
                                width="100%"
                                height="100%"
                                verticalScrollPolicy="auto"
                                horizontalScrollPolicy="off">
                        <s:Group id="groupToolbar"
                                 width="100%"/>
                    </s:Scroller>

                    <s:HGroup width="100%"
                              horizontalAlign="center">
                        <s:Button id="buttonApply"
                                  label="{Local.text('apply')}"
                                  click="onApply(event)"/>
                        <s:Button id="buttonNextTask"
                                  skinClass="ui.skins.ButtonThemeSkin"
                                  label="{Local.text('next_task')}"
                                  click="onNextTask(event)"/>
                    </s:HGroup>

                </s:VGroup>

            </s:Panel>

        </s:HGroup>

    </s:Group>

</s:Group>
