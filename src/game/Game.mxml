<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         creationComplete="onCreationComplete(event)">

    <fx:Script>
        <![CDATA[
        import global.Color;
        import global.Icons;

        import managers.PopupManager;
        import managers.State;

        import mx.events.FlexEvent;

        import ui.popups.Popup;

        import ui.popups.PopupConfirm;

        private var tasks:Array = [Task.Read_Introduction, Task.Make_Voronoi_Points, Task.Make_Tectonic_Plates];
        private var task:String;

        private function onCreationComplete(event:FlexEvent):void
        {
            State.dispatcher.addEventListener(State.STATE_CHANGED, function (event:Event):void
            {
                validate();
            });

            if (!State.loaded)
                State.loadLocal();
        }

        private function validate():void
        {
            validateTask();
        }

        private function validateTask():void
        {
            if (State.read("task") == undefined)
                State.write("task", tasks[0]);

            task = State.read("task");

            if (tasks.indexOf(task) < 0)
                throw new Error("Task '" + task + "' not found");

            labelTaskNumber.text = (tasks.indexOf(task) + 1) + "/" + tasks.length;
            labelTaskName.text = task;
        }

        private function onNextTask(event:MouseEvent):void
        {
            var p:PopupConfirm = new PopupConfirm();
            p.header = "Complete this task";
            p.description = "Completing this task will lock in your choices permanently and progress to the next task.";
            p.textConfirm = "Yes, I'm sure";
            p.textCancel = "Cancel";
            p.callbackConfirm = onNextTaskConfirm;

            PopupManager.open(p);
        }

        private function onNextTaskConfirm():void
        {
            // Go to the next task
            var newTaskIndex:int = tasks.indexOf(task) + 1;
            State.write("task", tasks[newTaskIndex]);
        }

        private function onAllTasks(event:MouseEvent):void
        {
            // todo open all tasks popup
            var p:Popup = new Popup();
            PopupManager.open(p);
        }
        ]]>
    </fx:Script>

    <s:HGroup width="100%"
              height="100%"
              padding="15"
              gap="15">

        <s:Group width="100%"
                 height="100%">

            <!--Canvas-->


            <s:HGroup verticalAlign="middle">
                <!--Task Actions-->
                <s:Panel skinClass="ui.skins.PanelSkinOutline"
                         maxWidth="200">
                    <s:VGroup width="100%">
                        <s:HGroup width="100%">
                            <s:Label id="labelTaskNumber"
                                     color="{Color.themePrimary}"/>
                            <s:Label id="labelTaskName"
                                     showTruncationTip="true"
                                     width="100%"/>
                        </s:HGroup>

                    </s:VGroup>
                </s:Panel>

                <s:Button skinClass="ui.skins.ButtonSkinIcon"
                          icon="{Icons.Tasks}"
                          toolTip="All tasks"
                          click="onAllTasks(event)"/>
            </s:HGroup>

        </s:Group>

        <!--Task Actions & Next Button-->
        <s:Panel skinClass="ui.skins.PanelSkinOutline"
                 width="320"
                 height="100%">
            <s:VGroup width="100%"
                      height="100%">

                <s:VGroup width="100%"
                          height="100%">

                </s:VGroup>

                <s:Button id="buttonNextTask"
                          label="Next Task"
                          click="onNextTask(event)"/>
            </s:VGroup>
        </s:Panel>

    </s:HGroup>

</s:Group>
